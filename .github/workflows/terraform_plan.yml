name: Terraform Plan
run-name: ${{ github.actor }} is testing out GitHub Actions 🚀

on: 
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, closed]
    paths:
      - 'src/terraform/platforms/*'
      - 'src/terraofrm/infrastructures/*'
      - 'src/terraform/services/*'
      - 'src/terraform/web-site/*'

permissions:
  pull-requests: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-20.04
    steps:
      - name: Test First
        run: echo "This is First job"

      - name: Verify Github Contexts
        run: |
          echo "github.action ${{github.action}}" # string  現在実行中のアクションの名前。 GitHubは、現在のステップがスクリプトを実行する際に、特殊なキャラクターを削除するか、runという名前を使います。 同じジョブの中で同じアクションを複数回使う場合、名前には順番に番号が加えられます。 たとえば、実行する最初のスクリプトの名前はrun1で、2番目のスクリプトの名前はrun2というようになります。 同様に、actions/checkoutの2回目の呼び出しはactionscheckout2となります。
          echo "github.action_path ${{github.action_path}}" # string    アクションが置かれているパス。 このパスを使用して、アクションと同じリポジトリにあるファイルに簡単にアクセスできます。 This attribute is only supported in composite actions.
          echo "github.actor ${{github.actor}}" # string    ワークフローの実行を開始したユーザのログイン。
          echo "github.base_ref ${{github.base_ref}}" # string  ワークフローの実行における base_ref またはPull Requestのターゲットブランチ。 このプロパティは、ワークフローの実行をトリガーするイベントが pull_request または pull_request_target のいずれかである場合にのみ使用できます。
          echo "github.event ${{github.event}}" # オブジェクト    webhook ペイロードの完全なイベント。 詳しい情報については、「ワークフローをトリガーするイベント」を参照してください。 このコンテキストを使用して、イベントの個々のプロパティにアクセスできます。
          echo "github.event_name ${{github.event_name}}" # string  ワークフローの実行をトリガーしたイベントの名前。
          echo "github.event_path ${{github.event_path}}" # string  ランナー上の完全なイベントwebhookペイロードへのパス。
          echo "github.head_ref ${{github.head_ref}}" # string  ワークフローの実行における head_ref またはPull Requestのソースブランチ。 このプロパティは、ワークフローの実行をトリガーするイベントが pull_request または pull_request_target のいずれかである場合にのみ使用できます。
          echo "github.job ${{github.job}}" # string    現在のジョブのjob_id。
          echo "github.ref ${{github.ref}}" # string    ワークフローの実行をトリガーしたブランチまたはタグ ref。 For branches this is the format refs/heads/<branch_name>, and for tags it is refs/tags/<tag_name>.
          echo "github.repository ${{github.repository}}" # string  所有者およびリポジトリの名前。 Codertocat/Hello-Worldなどです。
          echo "github.repository_owner ${{github.repository_owner}}" # string  リポジトリのオーナーの名前。 たとえばCodertocat。
          echo "github.run_id ${{github.run_id}}" # string  リポジトリ内でユニークな各実行に対する番号。 この番号は、ワークフローの実行をやり直しても変化しません、
          echo "github.run_number ${{github.run_number}}" # string  リポジトリ内の特定のワークフローの各実行に対するユニークな番号。 この番号は、ワークフローの最初の実行時に1で始まり、新たな実行ごとにインクリメントされます。 この番号は、ワークフローの実行をやり直しても変化しません、
          echo "github.sha ${{github.sha}}" # string    ワークフローの実行をトリガーしたコミット SHA。
          echo "github.token ${{github.token}}" # string    リポジトリにインストールされたGitHub Appの代わりに認証するためのトークン。 これは機能的にGITHUB_TOKENシークレットに等価です。 詳しい情報については「GITHUB_TOKENでの認証」を参照してください。
          echo "github.workflow ${{github.workflow}}" # string  ワークフローの名前。 ワークフローファイルで name を指定していない場合、このプロパティの値は、リポジトリ内にあるワークフローファイルのフルパスになります。
          echo "github.workspace ${{github.workspace}}" # string    checkoutアクションを使う際の、ステップにとってのデフォルトのワーキングディレクトリであり、リポジトリのデフォルトの場所です。

  changes:
    name: Changes
    runs-on: ubuntu-20.04
    needs: test
    outputs:
      platforms_code-resource: ${{ steps.filter.outputs.platforms_code-resource }}
      platforms_code-resource_files: ${{ steps.filter.outputs.platforms_code-resource_files }}
      platforms_monitoring: ${{ steps.filter.outputs.platforms_monitoring }}
      platforms_monitoring_files: ${{ steps.filter.outputs.platforms_monitoring_files }}
      platforms_platform_3_jc: ${{ steps.filter.outputs.platforms_platform_3_jc }}
      platforms_platform_3_jc_files: ${{ steps.filter.outputs.platforms_platform_3_jc_files }}
      infrastructures: ${{ steps.filter.outputs.infrastructures }}
      infrastructures_files: ${{ steps.filter.outputs.infrastructures_files }}
      services: ${{ steps.filter.outputs.services }}
      services_files: ${{ steps.filter.outputs.services_files }}
      web-sites: ${{ steps.filter.outputs.web-sites }}
      web-sites_files: ${{ steps.filter.outputs.web-sites_files }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: filter
        id: filter
        uses: dorny/paths-filter@v2
        with:
          list-files: json
          filters: |
            platforms_code-resource:
              - 'src/terraform/platforms/code-resource/**'
            platforms_monitoring:
              - 'src/terraform/platforms/monitoring/**'
            platforms_platform_3_jc:
              - 'src/terraform/platforms/platform_3_jc/**'
            infrastructures:
              - 'src/terraofrm/infrastructures/**'
            services:
              - 'src/terraform/services/**'
            web-sites:
              - 'src/terraform/web-site/**'

      - name: changed
        run: echo "aaa" ${{ steps.filter.outputs.platforms_core-resource_files }}

  platforms_code-resource:
    needs: changes
    if: ${{ needs.changes.outputs.platforms_code-resource == 'true' }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        env_name: [ production ]
    env:
      changed: ${{ toJSON(needs.changes.outputs.platforms_code-resource_files) }}
      project_root_dir: src/terraform/platforms/code-resource
      env_root_dir: src/terraform/platforms/code-resource/environments/${{ matrix.env_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: echo values
        run: |
          echo "Echo Values"
          echo "  - Environment Name:" ${{ matrix.env_name }}
          echo "  - Changed Files   :" ${{ env.changed }}
          echo "  - Project Root Dir:" ${{ env.project_root_dir }}
          echo "  - Env Root Dir    :" ${{ env.env_root_dir }}

      - name: Extract
        id: select
        run: |
          echo count=$(echo ${{ env.changed }} | jq ' .[] | select( startswith( "${{ env.env_root_dir }}" ) )' | wc -l) >> $GITHUB_ENV
          echo envs_yml=$(echo ${{ env.changed }} | jq ' .[] | select( startswith( "${{ env.project_root_dir }}/envs.yml" ) )' | wc -l) >> $GITHUB_ENV
          echo layers=$(echo ${{ env.changed }} | jq -r ' .[] | select( startswith( "${{ env.env_root_dir }}" ) )' | sed -e 's|${{ env.env_root_dir }}/||g' ) >> $GITHUB_ENV
          echo layer name: $(echo ${{ env.changed }} | jq -r ' .[] | select( startswith( "${{ env.env_root_dir }}" ) )' | sed -e 's|${{ env.env_root_dir }}/||g' | cut -d / -f 1 )


        # 最初の / で区切って、それより前も Layer として取得する

      - name: No Target Layer
        if: ${{ env.count == 0 && env.envs_yml == 0 }}
        run: |
          echo Count: ${{ env.count }}. No Target Layer.

      - name: Specific Target Layers
        if: ${{ env.count != 0 && env.envs_yml == 0 }}
        run: |
          echo Count: ${{ env.count }}. Specific Target Layers.
          echo Layers: ${{ env.layers }}
      
      - name: All Layers
        if: ${{ env.envs_yml != 0 }}
        run: |
          echo Count: ${{ env.count }}. All Layers.

      # 対象の環境が何か確認する
      # - 対象が存在しない場合は envs.yml が変更がったときだけ全部を実行したい。
      # - 対象の環境が存在する場合は、変更があった layer まで特定したい。　←こっちがメイン

  platforms_code-resource_production:
    needs: platforms_code-resource
    #if:
    runs-on: ubuntu-20.04
    steps:
      - name: hello
        run: echo hello
      # Checkout
      # AWS Assume Role
      # Run CodeBuild

  platforms_monitoring:
    needs: changes
    if: ${{ needs.changes.outputs.platforms_monitoring == 'true' }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        env_name: [ production ]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: echo hi
        run: echo "do platforms job" ${{ matrix.env_name }}

      - name: changeds files
        run: echo "this is changed files:" ${{ needs.changes.outputs.platforms_monitoring_files }}

      # 対象の環境が何か確認する
      # - 対象が存在しない場合は envs.yml が変更がったときだけ全部を実行したい。
      # - 対象の環境が存在する場合は、変更があった layer まで特定したい。　←こっちがメイン

  platforms_monitoring_production:
    needs: platforms_monitoring
    #if:
    runs-on: ubuntu-20.04
    steps:
      - name: hello
        run: echo hello
      # Checkout
      # AWS Assume Role
      # Run CodeBuild

  platforms_platform_3_jc:
    needs: changes
    if: ${{ needs.changes.outputs.platforms_platform_3_jc == 'true' }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        env_name: [ production, pre-production, development ]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: echo hi
        run: echo "do platforms job" ${{ matrix.env_name }}

      - name: changeds files
        run: echo "this is changed files:" ${{ needs.changes.outputs.platforms_platform_3_jc_files }}

  infrastructures:
    needs: changes
    if: ${{ needs.changes.outputs.infrastructures == 'true' }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        env_name: [ production ]
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - run: echo "do infrastructures job" ${{ matrix.env_name }}

      - name: changeds files
        run: echo "this is changed files:" ${{ needs.changes.outputs.infrastructures_files }}

  services:
    needs: changes
    if: ${{ needs.changes.outputs.services == 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - run: echo "do services job"

      - name: changeds files
        run: echo "this is changed files:" ${{ needs.changes.outputs.services_files }}

  web-sites:
    needs: changes
    if: ${{ needs.changes.outputs.web-sites == 'true' }}
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - run: echo "do web-sites job"

      - name: changeds files
        run: echo "this is changed files:" ${{ needs.changes.outputs.web-sites_filters }}
