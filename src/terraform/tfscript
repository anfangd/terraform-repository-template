#!/usr/bin/env bash

set -euC

TFS_VERSION=0.0.1

EXECURTE_COMMAND=tfscript

CH_DIRS=()
TFW_TEMPLATES=()
TFW_VARFILE=()
OPTS=("")
SUB_COMMANDS=()

CURRENT_DIRECTORY=$(pwd)

#
# Exit with error displaying usage.
#
function usage() {
  cat <<EOS >&2

Usage: $0 [global options] <subcommand> [args]

EOS
  exit 1
}

#
#
#
function scan_command() {

    commands=(
        "tfenv"
        "tflint"
        "tfupdate"
        "jq"
    )
    set +e
    for command in "${commands[@]}"; do
        which "${command}" > /dev/null
        if [ ! "$?" ]; then
            echo "" >&2
            echo "Erorr: There is no ${command} command." >&2
            echo "" >&2
            exit 126
        fi
    done
    set -e
}

#
#
#
function parse_args() {

    COMMAND_LENGTH=0
    EXECURTE_COMMAND=tfscript
    return
    while (( $# > 0))
    do
        case "$1" in
            -d | -dir | --dir=*)
                # https://fumiyas.github.io/2013/12/15/test.sh-advent-calendar.html
                if [[ "$1" =~ ^--dir= ]]; then
                    CH_DIRS+=($( echo $1 | sed -e 's/^--dir=//'))
                elif [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                    echo "" >&2
                    echo "'option' required an argument." >&2
                    echo "" >&2
                    exit 1
                else
                    CH_DIRS+=("$2")
                    shift
                fi
                ;;
            -tt | --tfw-template=*)
                if [[ "$1" =~ ^--tfw-template ]]; then
                    TFW_TEMPLATES+=($( echo $1 | sed -e 's/^--tfw-template=//'))
                elif [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                    echo "" >&2
                    echo "'option' required an argument." >&2
                    echo "" >&2
                    exit 1
                else
                    TFW_TEMPLATES+=("$2")
                    shift
                fi
                ;;
            -tv | --tfw-varfile=*)
                if [[ "$1" =~ ^--tfw- ]]; then
                    TFW_VARFILE+=($( echo $1 | sed -e 's/^--tfw-varfile=//'))
                elif [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                    echo "" >&2
                    echo "'option' required an argument." >&2
                    echo "" >&2
                    exit 1
                else
                    TFW_VARFILE+=("$2")
                    shift
                fi
                ;;
            -*)
                OPTS+=("$1")
                ;;
            config)
                echo config
                let ++COMMAND_LENGTH
                EXECURTE_COMMAND=tfwrapper_config
                ;;
            diff)
                echo scan diff
                let ++COMMAND_LENGTH
                EXECURTE_COMMAND=tfwrapper_diff
                ;;
            lint)
                let ++COMMAND_LENGTH
                EXECURTE_COMMAND=tflint
                ;;
            update)
                let ++COMMAND_LENGTH
                EXECURTE_COMMAND=tfupdate
                ;;
            init | validate | plan | apply | destroy | fmt | import | show | test | version )
                let ++COMMAND_LENGTH
                EXECURTE_COMMAND="terraform"
                SUB_COMMANDS+=("$1")
                ;;
            providers)
                let ++COMMAND_LENGTH
                EXECURTE_COMMAND="terraform"
                SUB_COMMANDS+=("$1")
                case "$2" in
                    lock | mirror | schema)
                        SUB_COMMANDS+=("$2")
                        shift
                        ;;
                esac
                ;;
            state)
                let ++COMMAND_LENGTH
                EXECURTE_COMMAND="terraform"
                SUB_COMMANDS+=("$1")
                case "$2" in
                    list | mv | pull | push | repalace-provider | rm | show)
                        SUB_COMMANDS+=("$2")
                        shift
                        ;;
                esac
                ;;
            workspace)
                let ++COMMAND_LENGTH
                EXECURTE_COMMAND="terraform"
                SUB_COMMANDS+=("$1")
                case "$2" in
                    delete | liset | new | select | show)
                        SUB_COMMANDS+=("$2")
                        shift
                        ;;
                esac
                ;;
            *)
                SUB_COMMANDS+=("$1")
                ;;
        esac
        shift
    done

    if [ $COMMAND_LENGTH -gt 1 ]; then
        echo "" >&2
        echo "Error: Too many command line arguments" 1>&2
        echo "" >&2
        exit 126
    fi

    #usage
}

#
#
#
function read_config() {
    echo "This is read_config function."
}

#
#
#
function read_envs() {
    echo "This is read_envs functioon."
}

#
#
#
function tfwrapper_config() {
    echo "tfwapper:tfwapper_config"

    if [ -f "${CURRENT_DIRECTORY}/.tfwrapper/config.json" ]; then
        echo There is config file.
        cat "${CURRENT_DIRECTORY}/.tfwrapper/config.json" | jq -r '.TFWProject.Name'
    else
        echo There is no config file.
    fi
}

#
#
#
function tfwrapper_diff() {
    echo "tfwapper:tfwapper_diff"
    echo "tfwrapper:execute_diff terraform plan)"
    echo "tfwrapper:execute_diff if ret_val=1, there is error"
    echo "tfwrapper:execute_diff if ret_val=2, there is diff"
}

#
#
#
function execute_tflint() {
    echo "tfwrapper:execute_tflint"
    TF_OPTION=$(echo ${OPTS[@]})
    TF_SUB_COMMANDS=$(echo ${SUB_COMMANDS})
    echo "tfwrapper:execute_tflint tflint $(echo ${TF_SUB_COMMANDS[@]}) ${TF_OPTION}"
}

#
#
#
function execute_tfupdate() {
    echo "tfwrapper:execute_tfupdate"
    TF_OPTION=$(echo ${OPTS[@]})
    TF_SUB_COMMANDS=$(echo ${SUB_COMMANDS})
    echo "tfwrapper:execute_tfupdate tfupdate $(echo ${TF_SUB_COMMANDS[@]}) ${TF_OPTION}"
}

#
#
#
function execute_terraform() {

    TF_OPTION=$(echo ${OPTS[@]})
    TF_SUB_COMMANDS=$(echo ${SUB_COMMANDS[@]})
    echo "# Execute: terraform $(echo ${TF_SUB_COMMANDS[@]}) ${TF_OPTION}"
    echo "# Dir: ${dir}"
    echo "# Plugin Cache: ${TF_PLUGIN_CACHE_DIR:-(none)}"
    eval "terraform fmt" > /dev/null
    eval "terraform $(echo ${TF_SUB_COMMANDS[@]}) ${TF_OPTION}"
}

#
#
#
function main() {
    echo "This is main function."
    echo ""
    echo "# Current dir:" ${CURRENT_DIRECTORY}
    echo "#"
    echo "# Execute Commands: ${EXECURTE_COMMAND} $(echo ${SUB_COMMANDS[@]})"
    echo "# Options: $(echo ${OPTS[@]:-(none)})"
    echo "#"

    case "$EXECURTE_COMMAND" in
        tfwrapper_config)
            tfwrapper_config
            exit 0
            ;;
    esac

    for dir in ${TFW_TEMPLATES[@]+"${TFW_TEMPLATES[@]}"}
    do
        if [ ! -d "${CURRENT_DIRECTORY}/${dir}" ]; then
            echo "" >&2
            echo Invalid directory path $dir >&2
            echo "" >&2
            exit 1
        fi
    done
    echo "# Source of TF Template Dirs: $(echo ${TFW_TEMPLATES[@]:-(none)})"

    for dir in ${TFW_VARFILE[@]+"${TFW_VARFILE[@]}"}
    do
        if [ ! -d "${CURRENT_DIRECTORY}/${dir}" ]; then
            echo "" >&2
            echo Invalid directory path $dir >&2
            echo "" >&2
            exit 1
        fi
    done
    echo "# Source of TF VarFile Dirs: $(echo ${TFW_VARFILE[@]:-(none)})"

    for dir in ${CH_DIRS[@]+"${CH_DIRS[@]}"}
    do
        if [ ! -d "${CURRENT_DIRECTORY}/${dir}" ]; then
            echo "" >&2
            echo Invalid directory path $dir >&2
            echo "" >&2
            exit 1
        fi
    done
    echo "# Target Dirs: ${CH_DIRS[@]:-(none)}"
    echo "#"

    if [ ! ${CH_DIRS[@]+"${CH_DIRS[@]}"} ]; then
        echo "" >&2
        echo "Error: Target directory is not set." >&2
        echo ""
        echo "  Please set -d DIR option to execute ${EXECURTE_COMMAND}" >&2
        echo "" >&2
        exit 1
    fi

    set +e
    for dir in ${CH_DIRS[@]+"${CH_DIRS[@]}"}
    do
        cd "${CURRENT_DIRECTORY}/${dir}"

        for template in ${TFW_TEMPLATES[@]+"${TFW_TEMPLATES[@]}"}
        do
            mkdir -p .tf_template
            cp -fp ${CURRENT_DIRECTORY}/${template}/* ./.tf_template/
        done
        for varfile in ${TFW_VARFILE[@]+"${TFW_VARFILE[@]}"}
        do
            mkdir -p .tf_varfile
            cp -fp ${CURRENT_DIRECTORY}/${varfile}/* ./.tf_varfile/
        done

        case "$EXECURTE_COMMAND" in
            tfwrapper_diff)
                tfwrapper_diff
                ;;
            tflint)
                execute_tflint
                ;;
            tfupdate)
                execute_tfupdate
                ;;
            terraform)
                execute_terraform
                ;;
            *)
                echo "" >&2
                echo "Error: There is no tfwrapper ${SUB_COMMANDS}." >&2
                echo "" >&2
                usage
                ;;
        esac

        if [ ${TFW_TEMPLATES[@]+"${TFW_TEMPLATES[@]}"} ]; then
            rm -rf ./.tf_template/
        fi
        if [ ${TFW_VARFILE[@]+"${TFW_VARFILE[@]}"} ]; then
            rm -rf ./.tf_varfile/
        fi

        cd "${CURRENT_DIRECTORY}"
    done
    set -e

}

# Entrypoint
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    echo "# This is entrypoint."
    scan_command
    parse_args "$@"
    # main
fi
